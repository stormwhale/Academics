library(tidyverse)
library(tidyverse)
library(ggplot2)
url<-"https://raw.githubusercontent.com/stormwhale/data-mines/refs/heads/main/job_skills.csv"
df<-read.csv(url, sep=',')
nrow(df) #12217
#remove empty cells:
df1<- na.omit(if_else(df$job_skills=="", NA, df))
nrow(df1) #12212
view(df1)
#separate the skills:
df_mod<- df1 %>%
separate_wider_delim(job_skills, delim=',',
names_sep = '_',
too_few = 'align_start')
view(df_mod)
#Select only the first 20 skills listed:
df_mod<- df_mod %>%
subset(select = c(1:21))
view(df_mod)
#pivot_longer to put all skills into one column:
df_mod_long<- df_mod %>%
pivot_longer(cols = c(2:21), #This is where we can adjust how many columns we want to include. Too many will cause loading issue.
names_to = 'sets',
values_to = 'Skills',
values_drop_na = TRUE)
#remove 'sets' column:
df_mod_long<- df_mod_long%>%
subset(select = c(job_link, Skills))
#trimming the white spaces:
df_skills<-data.frame('Skills'=trimws(df_mod_long$Skills))
#Filter out the top 10 wanted skills:
top_ten<- df_skills %>%
count(Skills) %>%
slice_max(n, n= 10)
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
#create a function to extract the ID numbers from the job_link:
id<- function(df) {
stringr::str_extract(df, "(//d)+$")
}
id(df1$job_link)
stringr::str_extract(df, "(\\d)+$")
#create a function to extract the ID numbers from the job_link:
id<- function(df) {
stringr::str_extract(df, "(\\d)+$")
}
id(df1$job_link)
df1$job_link<-id(df1$job_link)
df1
view(df1)
names(df1)[names(df1)='job_link'] <-"job_ID"
names(df1)[names(df1)=='job_link'] <-"job_ID"
view(df1)
#remove empty cells:
df1<- na.omit(if_else(df$job_skills=="", NA, df))
nrow(df1) #12212
view(df1)
url<-"https://raw.githubusercontent.com/stormwhale/data-mines/refs/heads/main/job_skills.csv"
df<-read.csv(url, sep=',')
nrow(df) #12217
#create a function to extract the ID numbers from the job_link:
id<- function(df) {
stringr::str_extract(df, "(\\d)+$")
}
#transform and rename job_link to job_ID:
df$job_link<-id(df1$job_link)
#transform and rename job_link to job_ID:
df$job_link<-id(df$job_link)
df<-names(df1)[names(df)=='job_link'] <-"job_ID"
view(df1)
view(df)
df<-read.csv(url, sep=',')
#transform and rename job_link to job_ID:
df$job_link<-id(df$job_link)
view(df)
names(df)[names(df)=='job_link'] <-"job_ID"
view(df)
#remove empty cells:
df<- na.omit(if_else(df$job_skills=="", NA, df))
#separate the skills:
df_mod<- df %>%
separate_wider_delim(job_skills, delim=',',
names_sep = '_',
too_few = 'align_start')
view(df_mod)
#Select only the first 20 skills listed:
df_mod<- df_mod %>%
subset(select = c(1:21))
view(df_mod)
#pivot_longer to put all skills into one column:
df_mod_long<- df_mod %>%
pivot_longer(cols = c(2:21), #This is where we can adjust how many columns we want to include. Too many will cause loading issue.
names_to = 'sets',
values_to = 'Skills',
values_drop_na = TRUE)
#remove 'sets' column:
df_mod_long<- df_mod_long%>%
subset(select = c(job_link, Skills))
#remove 'sets' column:
df_mod_long<- df_mod_long%>%
subset(select = c(job_ID, Skills))
#trimming the white spaces:
df_skills<-data.frame('Skills'=trimws(df_mod_long$Skills))
#Filter out the top 10 wanted skills:
top_ten<- df_skills %>%
count(Skills) %>%
slice_max(n, n= 10)
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
df2<-read.csv(job_posting, header=TRUE, sep = ',')
#Transform the job_link to job_ID in the other two tables:
job_posting<- "https://raw.githubusercontent.com/stormwhale/data-mines/refs/heads/main/job_postings.csv"
df2<-read.csv(job_posting, header=TRUE, sep = ',')
viewdf2
view(df2)
#Transform the job_link to job_ID in job_posting table:
df2$job_link<- id(df2$job_link)
view(df2)
head(df2)
head(df2)
nrow(df) #12212
view(df)
#separate the skills:
df_mod<- df %>%
separate_wider_delim(job_skills, delim=',',
names_sep = '_',
too_few = 'align_start')
#Select only the first 20 skills listed:
df_mod_20<- df_mod %>%
subset(select = c(1:21))
#pivot_longer to put all skills into one column:
df_mod_long<- df_mod20 %>%
pivot_longer(cols = c(2:21), #This is where we can adjust how many columns we want to include. Too many will cause loading issue.
names_to = 'sets',
values_to = 'Skills',
values_drop_na = TRUE)
#Select only the first 20 skills listed:
df_mod_20<- df_mod %>%
subset(select = c(1:21))
#pivot_longer to put all skills into one column:
df_mod_long<- df_mod_20 %>%
pivot_longer(cols = c(2:21), #This is where we can adjust how many columns we want to include. Too many will cause loading issue.
names_to = 'sets',
values_to = 'Skills',
values_drop_na = TRUE)
#remove 'sets' column:
df_mod_long<- df_mod_long%>%
subset(select = c(job_ID, Skills))
#trimming the white spaces:
df_skills<-data.frame('Skills'=trimws(df_mod_long$Skills))
#Filter out the top 10 wanted skills:
top_ten<- df_skills %>%
count(Skills) %>%
slice_max(n, n= 10)
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
view(df_mod_20)
names(df2)[names(df2)=='job_link']<-'job_ID'
view(df2)
#Sort the ten top skills desired by associate level DS jobs:
#Match the job_ID from df_mod_20 to df2:
df2 %>%
filter(job_level=='Associate') %>%
subset(select = c(job_ID, job_level))
#Sort the ten top skills desired by associate level DS jobs:
#Match the job_ID from df_mod_20 to df2:
df2_ID_Lv<- df2 %>%
filter(job_level=='Associate') %>%
subset(select = c(job_ID, job_level))
view(df2_ID_Lv)
merge(df_mod_20, df2_ID_Lv, by='job_ID')
df_merge<- merge(df_mod_20, df2_ID_Lv, by='job_ID')
view(df_merge)
df_merge<- merge(df2_ID_Lv, df_mod_20, by='job_ID')
view(df_merge)
sum(is.na(df_merge$job_level))
df_asso_skill<- merge(df2_ID_Lv, df_mod_20, by='job_ID')
df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE)
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE)
view(df_asso_skill_long)
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
subset(select = -'set')
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
select = -'sets'
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
select(-'sets')
df_asso_skill_long
view(df_asso_skill_long)
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=skills)) +
geom_bar()
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
slice_max(n=10) %>%
select(-'sets')
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
slice_max(n=10, order_by = skills) %>%
select(-'sets')
view(df_asso_skill_long)
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=skills)) +
geom_bar()
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
select(-'sets') %>%
count(skills) %>%
slice_max(n, n=10, order_by = skills)
df_asso_skill_long<- df_asso_skill %>%
pivot_longer(cols = c(3:22),
names_to = 'sets',
values_to = 'skills',
values_drop_na = TRUE) %>%
select(-'sets') %>%
count(skills) %>%
slice_max(n, n=10)
view(df_asso_skill_long)
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=skills)) +
geom_bar()
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=skills)) +
geom_bar(stat='identity')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=skills, y=n)) +
geom_bar(stat='identity')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n)) +
geom_bar(stat='identity')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(n, skills),y=n)) +
geom_bar(stat='identity')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n)) +
geom_bar(stat='identity') +
coord_flip()
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Number of time appeared in job postings',
y='Experties',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n), fill=skills) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n), fill=skills) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n), fill=n) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n,fill=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n,fill=skills)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n,fill=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n,fill=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')+
theme(legend.position = 'none')
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n, fill=n)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n, fill=skills)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n, fill=Skills)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))
#plotting it in a histogram:
ggplot(top_ten, aes(x=reorder(Skills, n), y=n, fill=Skills)) +
geom_bar(stat='identity') +
labs(x='Skills', y="", title='Top 10 Data Science Job skills wanted') +
theme(axis.text.x = element_text(angle = 45, hjust= 1))+
#Load Job posting table:#Load Job posting table:Skills
job_posting<- "https://raw.githubusercontent.com/stormwhale/data-mines/refs/heads/main/job_postings.csv"
#To generate the plot:
ggplot(df_asso_skill_long, aes(x=reorder(skills, n),y=n,fill=n)) +
geom_bar(stat='identity') +
coord_flip()+
labs(x='Experties',
y='Number of time appeared in job postings',
title='Top 10 skills frequently desired by associate level data scientist')+
theme(legend.position = 'none')
final_rating<- cbind(movie[, 1], pre_rating)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
url<- "https://raw.githubusercontent.com/stormwhale/data-mines/refs/heads/main/movieR.csv"
movie<- read.csv(url)
movie_ratings<- movie[1:16, 2:7] %>%
sapply(function(x) as.numeric(x))
prediction_rating<- function(row, col){
movie_mean<- mean(movie_ratings, na.rm=TRUE)
movie_rating_to_avg<- mean(col, na.rm=TRUE)
re_movie<- (movie_rating_to_avg - movie_mean)
user_rating_to_avg<- mean(row, na.rm=TRUE)
re_user<- (user_rating_to_avg - movie_mean)
return(movie_mean + re_user + re_movie)
}
# preview the working table:
movie_ratings
pre_movie<- function(ratings) {
for (i in 1:nrow(movie_ratings)){
for (j in 1:ncol(movie_ratings)) {
if (is.na(movie_ratings[i, j])){
movie_ratings[i, j]<- prediction_rating(movie_ratings[i, ], movie_ratings[, j])
}
}
}
return(round(movie_ratings, 1))
}
pre_rating<- pre_movie(movie_ratings)
final_rating<- cbind(movie[, 1], pre_rating)
colnames(final_rating)[colnames(final_rating)=="V1"] <-"Critic"
final_rating
